# -*- coding: utf-8 -*-
"""Logistic-Reg-Predict-Customer-Churn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CJ8h7mmhbLbhQJEdhFcmKakVokcso4xt

#Imports
"""

import numpy as np
import pandas as pd
from geopy.geocoders import Nominatim
import matplotlib.pyplot as plt
import math

data = pd.read_csv('/content/Churn_Modelling.csv')

"""#Classes

##PreprocessingEvaluator
"""

import numpy as np

class PreprocessingEvaluator:
    
    def __init__(self, data):
        self.data = data
        
    def check_for_nan(self):
        has_nan = self.data.isna().any().any()
        if has_nan:
            print("Dataset contains NaN values")
        else:
            print("Dataset does not contain NaN values")
            
    def check_for_infinity(self):
        has_inf = self.data.replace([np.inf, -np.inf], np.nan).isna().any().any()
        if has_inf:
            print("Dataset contains infinite values")
        else:
            print("Dataset does not contain infinite values")

    def check_for_outliers(self, threshold):
        numeric_cols = self.data.select_dtypes(include=[np.number]).columns
        for col in numeric_cols:
            has_outliers = (np.abs(self.data[col]) > threshold).any()
            if has_outliers:
                print(f"{col} column contains outliers above the threshold of {threshold}.")

    def check_for_skewness(self):
        skewness = self.data.skew()
        if (skewness > 0.5).any():
            skewed_cols = skewness[skewness > 0.5].index.tolist()
            print("The following columns are right-skewed:", skewed_cols)
        elif (skewness < -0.5).any():
            skewed_cols = skewness[skewness < -0.5].index.tolist()
            print("The following columns are left-skewed:", skewed_cols)
        else:
            print("No skewness found in dataset.")

"""#Implementation

##Instantiate objects
"""

# Initialize PreprocessingEvaluator with the dataset
evaluator = PreprocessingEvaluator(data)

"""##Evaluate Preprocessing"""

# check for NaN values
evaluator.check_for_nan()

# check for infinite values
evaluator.check_for_infinity()

data.dtypes

evaluator.check_for_outliers(threshold=6)

evaluator.check_for_skewness()